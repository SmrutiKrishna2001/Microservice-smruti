name: CI for Build & Push Docker Images

on:
  push:
    paths:
      - src/**/Dockerfile
      - .github/workflows/ci.yaml

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the source code
      - name: Checkout Source Code
        uses: actions/checkout@v3

      # Step 2: Install AWS CLI (if not already installed)
      - name: Install AWS CLI
        run: |
          if ! command -v aws &> /dev/null; then
            echo "AWS CLI not found, installing..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          else
            echo "AWS CLI already installed."
          fi

      # Step 3: Configure AWS Credentials from Secrets
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Debug AWS Environment Variables
      - name: Debug AWS Environment Variables
        run: |
          echo "Using AWS Region: ${{ secrets.AWS_REGION }}"
      
      # Step 5: Login to Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # Step 6: Build and Push Docker Images
      - name: Build and Push Docker Images
        run: |
          # Retrieve AWS Account ID
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

          # Loop through each microservice folder with a Dockerfile
          for DOCKERFILE in $(find src -name Dockerfile); do
            # Extract the microservice name (name of the folder containing the Dockerfile)
            SERVICE=$(basename $(dirname $DOCKERFILE))
            # Define the image tag
            IMAGE_TAG="$SERVICE:latest"
            
            # Define ECR repository name for the service
            REPO_NAME="$SERVICE"
            
            # Define ECR URI for the service
            ECR_URI="$ACCOUNT_ID.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$REPO_NAME"
            
            echo "Building and pushing image for service: $SERVICE to ECR repo: $REPO_NAME"
            
            # Check if the ECR repository exists, if not, create it
            aws ecr describe-repositories --repository-names $REPO_NAME || \
            aws ecr create-repository --repository-name $REPO_NAME

            # Build the Docker image
            docker build -t $SERVICE:latest $(dirname $DOCKERFILE)
            
            # Tag the Docker image for ECR
            docker tag $SERVICE:latest $ECR_URI:$IMAGE_TAG
            
            # Push the Docker image to the respective ECR repository
            docker push $ECR_URI:$IMAGE_TAG
          done
