name: CI for Build & Push Docker Images

on:
  push:
    paths:
      - src/**/Dockerfile
      - .github/workflows/ci.yaml

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify AWS Credentials (Debugging Step)
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}"
          echo "AWS_REGION=${{ secrets.AWS_REGION }}"

      - name: ECR login
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ${{ secrets.AWS_REGION }}

      - name: Build and Push Docker Images
        run: |
          # Retrieve AWS Account ID
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

          # Loop through each microservice folder with a Dockerfile
          for DOCKERFILE in $(find src -name Dockerfile); do
            # Extract the microservice name (name of the folder containing the Dockerfile)
            SERVICE=$(basename $(dirname $DOCKERFILE))
            # Define the image tag
            IMAGE_TAG="$SERVICE:latest"  # You can use any custom tag here (e.g., v1.0.0, build123)
            
            # Define ECR repository name for the service
            REPO_NAME="$SERVICE"
            
            # Define ECR URI for the service
            ECR_URI="$ACCOUNT_ID.dkr.ecr.${AWS_REGION}.amazonaws.com/$REPO_NAME"
            
            echo "Building and pushing image for service: $SERVICE to ECR repo: $REPO_NAME"
            
            # Check if the ECR repository exists, if not, create it
            aws ecr describe-repositories --repository-names $REPO_NAME || \
            aws ecr create-repository --repository-name $REPO_NAME

            # Build the Docker image
            docker build -t $SERVICE:latest $(dirname $DOCKERFILE)
            
            # Tag the Docker image for ECR
            docker tag $SERVICE:latest $ECR_URI:$IMAGE_TAG
            
            # Push the Docker image to the respective ECR repository
            docker push $ECR_URI:$IMAGE_TAG
          done
