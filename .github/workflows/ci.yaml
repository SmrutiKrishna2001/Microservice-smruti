name: CI for Build & Push Docker Images by GitHub Action
on:
  push:
    paths:
      - src/**/Dockerfile
      - .github/workflows/ci.yaml

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the source code
      - name: Checkout Source Code
        uses: actions/checkout@v4

      # Step 2: Configure AWS Credentials (using GitHub Secrets)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      # Step 3: Login to Amazon ECR
      - id: login-ecr
        name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Step 4: Build and Push Docker Images
      - name: Build and Push Docker Images
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          COMMIT_HASH=$(git rev-parse --short HEAD)

          for DOCKERFILE in $(find src -name Dockerfile); do
            # Get service name based on Dockerfile location
            if [[ "$DOCKERFILE" == "src/cartservice/src/Dockerfile" ]]; then
              SERVICE="cartservice"
            else
              SERVICE=$(basename $(dirname $DOCKERFILE))
            fi

            # Skip the src/Dockerfile if accidentally included
            if [ "$SERVICE" == "src" ]; then
              echo "Skipping top-level src Dockerfile"
              continue
            fi

            IMAGE_TAG="$COMMIT_HASH"  # Use commit hash as the tag for the image
            REPO_NAME="${SERVICE}-smruti"
            ECR_URI="$ACCOUNT_ID.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$REPO_NAME"
            
            echo "Building and pushing image for service: $SERVICE to ECR repo: $REPO_NAME with tag: $IMAGE_TAG"
            
            # Ensure the repository exists in ECR
            aws ecr describe-repositories --repository-names $REPO_NAME || \
            aws ecr create-repository --repository-name $REPO_NAME

            # Special logic for cartservice
            if [ "$SERVICE" == "cartservice" ]; then
              # Build the Docker image for cartservice using its specific Dockerfile and root directory as context
              docker build -t $SERVICE:$IMAGE_TAG -f src/cartservice/src/Dockerfile .
            else
              # Default build for all other services
              docker build -t $SERVICE:$IMAGE_TAG -f $DOCKERFILE $(dirname $DOCKERFILE)/../../
            fi

            # Tag the image and push it to ECR
            docker tag $SERVICE:$IMAGE_TAG $ECR_URI:$IMAGE_TAG
            docker push $ECR_URI:$IMAGE_TAG
          done
